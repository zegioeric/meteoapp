[{"/home/eric/projects/react/meteoapp/src/index.js":"1","/home/eric/projects/react/meteoapp/src/App.js":"2","/home/eric/projects/react/meteoapp/src/reportWebVitals.js":"3","/home/eric/projects/react/meteoapp/src/ApplicationRouter.js":"4","/home/eric/projects/react/meteoapp/src/routes/OnlyPublicRoute.js":"5","/home/eric/projects/react/meteoapp/src/components/Layout.js":"6","/home/eric/projects/react/meteoapp/src/components/PrivateLayout.js":"7","/home/eric/projects/react/meteoapp/src/pages/HomePage.js":"8","/home/eric/projects/react/meteoapp/src/routes/PrivateRoute.js":"9","/home/eric/projects/react/meteoapp/src/pages/LoginPage.js":"10","/home/eric/projects/react/meteoapp/src/pages/admin/DashboardPage.js":"11","/home/eric/projects/react/meteoapp/src/components/AnimationText.js":"12","/home/eric/projects/react/meteoapp/src/api/login.js":"13","/home/eric/projects/react/meteoapp/src/components/admin/TableList.js":"14","/home/eric/projects/react/meteoapp/src/components/Forecasts.js":"15","/home/eric/projects/react/meteoapp/src/api/openweather.js":"16","/home/eric/projects/react/meteoapp/src/components/Weather.js":"17","/home/eric/projects/react/meteoapp/src/pages/admin/EditCityPage.js":"18","/home/eric/projects/react/meteoapp/src/pages/admin/AddCityPage.js":"19","/home/eric/projects/react/meteoapp/src/components/admin/CityForm.js":"20","/home/eric/projects/react/meteoapp/src/api/cities.js":"21"},{"size":500,"mtime":1617120973617,"results":"22","hashOfConfig":"23"},{"size":254,"mtime":1617286975332,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1617120973617,"results":"25","hashOfConfig":"23"},{"size":1088,"mtime":1617230288184,"results":"26","hashOfConfig":"23"},{"size":317,"mtime":1617121404312,"results":"27","hashOfConfig":"23"},{"size":297,"mtime":1617277212115,"results":"28","hashOfConfig":"23"},{"size":1057,"mtime":1617230498189,"results":"29","hashOfConfig":"23"},{"size":3950,"mtime":1617353411289,"results":"30","hashOfConfig":"23"},{"size":579,"mtime":1617204520126,"results":"31","hashOfConfig":"23"},{"size":1946,"mtime":1617292862491,"results":"32","hashOfConfig":"23"},{"size":768,"mtime":1617286853217,"results":"33","hashOfConfig":"23"},{"size":774,"mtime":1617225937197,"results":"34","hashOfConfig":"23"},{"size":189,"mtime":1617137947293,"results":"35","hashOfConfig":"23"},{"size":936,"mtime":1617230378983,"results":"36","hashOfConfig":"23"},{"size":1536,"mtime":1617231457638,"results":"37","hashOfConfig":"23"},{"size":799,"mtime":1617306272538,"results":"38","hashOfConfig":"23"},{"size":1110,"mtime":1617306370199,"results":"39","hashOfConfig":"23"},{"size":908,"mtime":1617289141772,"results":"40","hashOfConfig":"23"},{"size":734,"mtime":1617289133372,"results":"41","hashOfConfig":"23"},{"size":3932,"mtime":1617309735833,"results":"42","hashOfConfig":"23"},{"size":911,"mtime":1617289165873,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1y9zqzg",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/eric/projects/react/meteoapp/src/index.js",[],["91","92"],"/home/eric/projects/react/meteoapp/src/App.js",[],"/home/eric/projects/react/meteoapp/src/reportWebVitals.js",[],"/home/eric/projects/react/meteoapp/src/ApplicationRouter.js",[],"/home/eric/projects/react/meteoapp/src/routes/OnlyPublicRoute.js",[],"/home/eric/projects/react/meteoapp/src/components/Layout.js",[],"/home/eric/projects/react/meteoapp/src/components/PrivateLayout.js",[],"/home/eric/projects/react/meteoapp/src/pages/HomePage.js",["93","94","95","96","97","98"],"import React, { useEffect, useState } from 'react'\nimport Forecasts from '../components/Forecasts'\nimport { getWeather, getForecast } from '../api/openweather'\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\n\nconst HomePage = () => {\n  const [weather, setWeather] = useState({})\n  const [forecast, setForecast] = useState({})\n  const [message, setMessage] = useState('Carico..')\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState('')\n  const [actualPosition, setActualPosition] = useState({})\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  }\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n    if(!position){\n      position = JSON.stringify({\n        name: 'Posizione attuale',\n        lat: '',\n        lon:''\n      });\n\n      localStorage.setItem('actualPosition', position);\n    }\n    let obj = JSON.parse(position);\n    setActualPosition(obj);\n    \n    return obj    \n  }\n\n  const changePosition = async () => {\n    setWeather({})\n    let position = getActualPosition()\n    const savedPositions = await getCities()\n    const countIndexes = Object.keys(savedPositions).length\n    if( countIndexes > 0){\n      let obj = {}\n      if(position.name == 'Posizione attuale'){\n        obj = savedPositions[0]\n        setGeoData(obj.lat, obj.lon)\n      } \n      else {\n        let cityIndex = savedPositions.findIndex(city => city.name === position.name)\n        let lastIndex = cityIndex+1\n        //last city\n        if(lastIndex == countIndexes){\n          obj = {\n            name: 'Posizione attuale',\n            lat: '',\n            lon: ''\n          }\n          setBrowserPosition()\n        } else {\n          obj = savedPositions[lastIndex]\n          setGeoData(obj.lat, obj.lon)\n        }\n      }\n      localStorage.setItem('actualPosition', JSON.stringify(obj));\n      setActualPosition(obj)\n    } else {\n      setBrowserPosition()\n    }\n  }\n\n  const fetchDataWeather = async (data) => {\n    const resWeather = await getWeather(data)\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate()\n    setWeather(resWeather)\n  }\n\n  const fetchDataForecast = async (data) => {\n    const resForecast = await getForecast(data)\n    setForecast(resForecast)\n  }\n\n  const setGeoData = (lat, lon) => {\n    setMessage('Carico..')\n    const geoData = {\n      lat: lat,\n      long: lon,\n    }\n    fetchDataWeather(geoData)\n    fetchDataForecast(geoData)\n  } \n\n  const getGeoPosition = () => {\n    if (navigator.geolocation){\n      navigator.geolocation. getCurrentPosition(function(position){\n        setGeoData(position.coords.latitude, position.coords.longitude)\n      }, function(err) {\n        setWeather({})\n        setMessage((err.code == 1) ? 'Attiva la posizione del browser' : err.message)\n      }, {\n        enableHighAccuracy: true,\n        maximumAge        : 30000,\n        timeout           : 25000\n      });\n    }\n  }\n\n  const setBrowserPosition = () => {\n    getGeoPosition()\n    setInterval(() => {\n      getGeoPosition()\n    }, 3600000)\n  }\n\n  useEffect(()=>{\n    let res = getActualPosition()\n    if(res.name == 'Posizione attuale'){\n      setBrowserPosition()\n    } else {\n      setGeoData(res.lat, res.lon)\n    }\n  },[])\n\n  return (\n    <div>\n      {(Object.keys(weather).length > 0) ?\n        <Weather \n          weather={weather} \n          lastWeatherUpdate={lastWeatherUpdate} \n          actualPosition={actualPosition}\n          changePosition={changePosition}\n        />\n        : <span className='message'>{message}</span>\n      }\n      <div className='box-change-position' onClick={changePosition} >\n        {actualPosition.name} \n        <span style={{marginLeft:'10px'}}>➔</span>\n      </div>\n      <Forecasts forecast={forecast} />\n    </div>\n  )\n}\n\nexport default HomePage","/home/eric/projects/react/meteoapp/src/routes/PrivateRoute.js",[],"/home/eric/projects/react/meteoapp/src/pages/LoginPage.js",[],"/home/eric/projects/react/meteoapp/src/pages/admin/DashboardPage.js",[],"/home/eric/projects/react/meteoapp/src/components/AnimationText.js",[],"/home/eric/projects/react/meteoapp/src/api/login.js",[],"/home/eric/projects/react/meteoapp/src/components/admin/TableList.js",[],"/home/eric/projects/react/meteoapp/src/components/Forecasts.js",[],"/home/eric/projects/react/meteoapp/src/api/openweather.js",[],"/home/eric/projects/react/meteoapp/src/components/Weather.js",[],"/home/eric/projects/react/meteoapp/src/pages/admin/EditCityPage.js",["99"],"import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Container } from 'react-bootstrap'\nimport { getCity, editCity } from '../../api/cities'\nimport CityForm from '../../components/admin/CityForm';\n\n\nconst EditCityPage = () => {\n  const history = useHistory()\n  const { id } = useParams()\n  const [form, setForm] = useState({})\n \n  const fetchDataCity = async () => {\n    const resCity = await getCity(id)\n    setForm(resCity)\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault(); \n    await editCity(form, id);\n    history.push(\"/admin/dashboard/\")\n  }\n\n  useEffect(() => {\n    fetchDataCity()\n  }, [])\n\n  return (\n    <Container>\n      <h1>Modifica {form.name}</h1>\n      <CityForm \n        handleSubmit={handleSubmit} \n        form={form} \n        setForm={setForm}\n        />\n    </Container>\n  )\n  \n}\nexport default EditCityPage\n","/home/eric/projects/react/meteoapp/src/pages/admin/AddCityPage.js",["100"],"import React, { useState } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useHistory } from 'react-router';\nimport { addCity } from '../../api/cities'\nimport CityForm from '../../components/admin/CityForm';\n\nconst AddCityPage = () => {\n  const history = useHistory()\n  const [form, setForm] = useState({\n    name: '',\n    lat: '',\n    lon: '',\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const resCity = await addCity(form);\n    history.push(\"/admin/dashboard/\")\n  }\n\n  return (\n    <Container>\n      <h1>Aggiungi città</h1>\n      <CityForm \n        handleSubmit={handleSubmit} \n        form={form} \n        setForm={setForm}\n      />\n    </Container>\n  )\n}\n\n\nexport default AddCityPage\n","/home/eric/projects/react/meteoapp/src/components/admin/CityForm.js",["101","102","103","104","105","106","107"],"import React, { useEffect, useState } from 'react'\nimport { Form, Button, Col} from 'react-bootstrap';\nimport { Hint } from 'react-autocomplete-hint';\nimport { getJsonCities } from '../../api/cities'\n\nconst CityForm = ( { handleSubmit, form, setForm } ) => {\n  const [errors, setErrors] = useState({})\n  const [hintData, setHintData] = useState([])\n  const [cityController, setCityController] = useState(form.name)\n  const [jsonCities, setJsonCities] = useState([])\n\n  const insertCoord = (coordinate, formName) => {\n    setForm({\n      ['name']: formName,\n      ['lat']: coordinate.lat,\n      ['lon']: coordinate.lon,\n    })\n  }\n\n  const getData = async (formName) => {\n    const resJsonCities = await getJsonCities(formName)\n    var hintArray = []\n    setJsonCities(resJsonCities)\n    resJsonCities.map(res => {\n      hintArray.push(res.name)\n      setCityController(res.name)\n      insertCoord(res.coord, formName)\n    })\n    setHintData(hintArray)\n  }\n\n  const validateForm = () => {\n    //validate handle react / react hook / yup / ..\n    for (const [key, value] of Object.entries(form)) {\n      if(!value){\n        setErrors({ [key]: \"required*\"})\n        return false\n      } \n    }\n    return true\n  }\n\n  const handleClick = (target) => {\n    setForm({\n      ...form,\n      [target.name]: target.value\n    })\n  }\n\n  const handleChange = async (target) => {\n    setForm({\n      ...form,\n      [target.name]: target.value\n    })\n\n    if(target.name == 'name'){\n      let value = target.value.charAt(0).toUpperCase() + target.value.slice(1);\n      if(value.length > 3){\n        await getData(value)\n      } else {\n        insertCoord({\n          lat:'',\n          lon: ''\n        }, value)\n        setHintData([])\n      }\n    }\n  }\n\n  const changeCity = (city) => {\n    var hintArray = []\n    jsonCities.map(res => {\n      if(city == res.name){\n        hintArray.push(res.name)\n        setCityController(res.name)\n        insertCoord(res.coord, res.name)\n      }\n    })\n  }\n\n  const Cities = () => {\n    return(\n      hintData.map( (city, index) => (\n        <span key={index} onClick={()=> changeCity(city) }>\n          {city}\n        </span>\n        )\n      )\n    )\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    form.name = cityController\n    if(validateForm(form)){\n      handleSubmit(e, {...form})\n    }\n  }\n\n  useEffect(() => { \n    setCityController(form.name)\n  }, [form.name])\n\n  return(\n    <Form style={{marginTop: '50px'}}>\n      <Form.Row>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridName\">\n          <Form.Label>Nome Città*</Form.Label>\n          <Hint options={hintData} allowTabFill>\n            <input className='input-with-hint form-control'\n              value={form.name}\n              name=\"name\"\n              onChange={e => handleChange(e.target)}   \n              onClick={e => handleClick(e.target)}   \n              />\n          </Hint>\n          \n          <p>{errors.name}</p>\n        </Form.Group>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridLat\">\n          <Form.Label>Latitudine*</Form.Label>\n          <Form.Control placeholder=\"Latitudine\" name=\"lat\" value={form.lat} \n          disabled\n          onChange={e => handleChange(e.target)}\n           />\n          <p>{errors.lat}</p>\n          <p style={{marginTop: '5px'}}>{cityController}</p>\n          <hr />\n          <div className='cities-map'>\n            <Cities />\n          </div>\n        </Form.Group>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridLon\">\n          <Form.Label>Longitudine*</Form.Label>\n          <Form.Control placeholder=\"Longitudine\" name=\"lon\" value={form.lon} \n          disabled\n          onChange={e => handleChange(e.target)}\n           />\n          <p>{errors.lon}</p>\n        </Form.Group>\n      </Form.Row>\n      <Button variant=\"primary\" type=\"button\" onClick={submitForm}>\n        Salva\n      </Button>\n    </Form>  \n    )\n}\n\nexport default CityForm\n","/home/eric/projects/react/meteoapp/src/api/cities.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":44,"column":24,"nodeType":"114","messageId":"115","endLine":44,"endColumn":26},{"ruleId":"112","severity":1,"message":"113","line":52,"column":22,"nodeType":"114","messageId":"115","endLine":52,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":95,"column":7,"nodeType":"118","messageId":"119","endLine":95,"endColumn":48,"fix":"120"},{"ruleId":"112","severity":1,"message":"113","line":99,"column":30,"nodeType":"114","messageId":"115","endLine":99,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":117,"column":17,"nodeType":"114","messageId":"115","endLine":117,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":122,"column":5,"nodeType":"123","endLine":122,"endColumn":7,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":26,"column":6,"nodeType":"123","endLine":26,"endColumn":8,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":17,"column":11,"nodeType":"129","messageId":"130","endLine":17,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":14,"column":7,"nodeType":"133","messageId":"134","endLine":14,"endColumn":25,"fix":"135"},{"ruleId":"131","severity":1,"message":"136","line":15,"column":7,"nodeType":"133","messageId":"134","endLine":15,"endColumn":30,"fix":"137"},{"ruleId":"131","severity":1,"message":"138","line":16,"column":7,"nodeType":"133","messageId":"134","endLine":16,"endColumn":30,"fix":"139"},{"ruleId":"140","severity":1,"message":"141","line":24,"column":27,"nodeType":"142","messageId":"143","endLine":24,"endColumn":29},{"ruleId":"112","severity":1,"message":"113","line":56,"column":20,"nodeType":"114","messageId":"115","endLine":56,"endColumn":22},{"ruleId":"140","severity":1,"message":"141","line":72,"column":24,"nodeType":"142","messageId":"143","endLine":72,"endColumn":26},{"ruleId":"112","severity":1,"message":"113","line":73,"column":15,"nodeType":"114","messageId":"115","endLine":73,"endColumn":17},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-whitespace-before-property","Unexpected whitespace before property getCurrentPosition.","MemberExpression","unexpectedWhitespace",{"range":"146","text":"147"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setBrowserPosition' and 'setGeoData'. Either include them or remove the dependency array.","ArrayExpression",["148"],"React Hook useEffect has a missing dependency: 'fetchDataCity'. Either include it or remove the dependency array.",["149"],"no-unused-vars","'resCity' is assigned a value but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property ['name'] found.","Property","unnecessarilyComputedProperty",{"range":"150","text":"151"},"Unnecessarily computed property ['lat'] found.",{"range":"152","text":"153"},"Unnecessarily computed property ['lon'] found.",{"range":"154","text":"155"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",[2695,2697],".",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},[537,545],"'name'",[563,570],"'lat'",[594,601],"'lon'","Update the dependencies array to be: [setBrowserPosition, setGeoData]",{"range":"160","text":"161"},"Update the dependencies array to be: [fetchDataCity]",{"range":"162","text":"163"},[3381,3383],"[setBrowserPosition, setGeoData]",[674,676],"[fetchDataCity]"]