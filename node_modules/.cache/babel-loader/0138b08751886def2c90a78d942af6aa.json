{"ast":null,"code":"import axios from 'axios';\nconst endpoint = '//api.openweathermap.org/data/2.5/weather?q=London'; // ,uk&callback=test&appid={API key}\n\nconst API_KEY = 'bd84d98d30841d5669d443eac854e864'; //   const params = {\n//     appid: key,\n//     lang,\n//     units: unit,\n//     lat,\n//     lon,\n//   };\n\nconst params = {\n  appid: API_KEY\n};\nexport const getForecast = async () => {\n  const forecastResponse = await axios.get(endpoint, {\n    params\n  });\n  console.log(forecastResponse);\n  return true; // return await axios.get(`api.openweathermap.org/data/2.5/weather?q=London&appid={${API_KEY}}`).then(res => {\n  //   return res\n  // })\n}; // const useOpenWeather = (options) => {\n//   const endpoint = '//api.openweathermap.org/data/2.5/onecall';\n//   const [state, dispatch] = useReducer(fetchReducer, initialState);\n//   const { data, errorMessage } = state;\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { unit, lang, key, lon, lat } = options;\n//   const params = {\n//     appid: key,\n//     lang,\n//     units: unit,\n//     lat,\n//     lon,\n//   };\n//   const fetchData = async () => {\n//     setIsLoading(true);\n//     try {\n//       const forecastResponse = await axios.get(endpoint, { params });\n//       const payload = mapData(\n//         forecastResponse.data.daily,\n//         forecastResponse.data.current,\n//         lang,\n//       );\n//       dispatch({\n//         type: SUCCESS,\n//         payload,\n//       });\n//     } catch (error) {\n//       console.error(error.message);\n//       dispatch({ type: FAILURE, payload: error.message || error });\n//     }\n//     setIsLoading(false);\n//   };","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/api/openweather.js"],"names":["axios","endpoint","API_KEY","params","appid","getForecast","forecastResponse","get","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,QAAQ,GAAG,oDAAjB,C,CACA;;AACA,MAAMC,OAAO,GAAG,kCAAhB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAEF;AADM,CAAf;AAIA,OAAO,MAAMG,WAAW,GAAG,YAAY;AACrC,QAAMC,gBAAgB,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAV,EAAoB;AAAEE,IAAAA;AAAF,GAApB,CAA/B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;AACA,SAAO,IAAP,CAHqC,CAIrC;AACA;AACA;AACD,CAPM,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios'\nconst endpoint = '//api.openweathermap.org/data/2.5/weather?q=London';\n// ,uk&callback=test&appid={API key}\nconst API_KEY = 'bd84d98d30841d5669d443eac854e864'\n//   const params = {\n//     appid: key,\n//     lang,\n//     units: unit,\n//     lat,\n//     lon,\n//   };\nconst params = {\n  appid: API_KEY\n};\n\nexport const getForecast = async () => {\n  const forecastResponse = await axios.get(endpoint, { params });\n  console.log(forecastResponse)\n  return true\n  // return await axios.get(`api.openweathermap.org/data/2.5/weather?q=London&appid={${API_KEY}}`).then(res => {\n  //   return res\n  // })\n}\n\n\n// const useOpenWeather = (options) => {\n//   const endpoint = '//api.openweathermap.org/data/2.5/onecall';\n//   const [state, dispatch] = useReducer(fetchReducer, initialState);\n//   const { data, errorMessage } = state;\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { unit, lang, key, lon, lat } = options;\n//   const params = {\n//     appid: key,\n//     lang,\n//     units: unit,\n//     lat,\n//     lon,\n//   };\n\n//   const fetchData = async () => {\n//     setIsLoading(true);\n//     try {\n//       const forecastResponse = await axios.get(endpoint, { params });\n//       const payload = mapData(\n//         forecastResponse.data.daily,\n//         forecastResponse.data.current,\n//         lang,\n//       );\n\n//       dispatch({\n//         type: SUCCESS,\n//         payload,\n//       });\n//     } catch (error) {\n//       console.error(error.message);\n//       dispatch({ type: FAILURE, payload: error.message || error });\n//     }\n//     setIsLoading(false);\n//   };"]},"metadata":{},"sourceType":"module"}