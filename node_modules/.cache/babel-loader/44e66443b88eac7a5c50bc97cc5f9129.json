{"ast":null,"code":"var _jsxFileName = \"/home/eric/projects/react/meteoapp/src/pages/HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Forecasts from '../components/Forecasts';\nimport { getWeather, getForecast } from '../api/openweather';\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HomePage = () => {\n  _s();\n\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [message, setMessage] = useState('Carico..');\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState();\n  const [actualPosition, setActualPosition] = useState();\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  };\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n\n    if (position == undefined) {\n      position = {\n        name: 'Posizione attuale',\n        lat: '',\n        lon: ''\n      };\n      localStorage.setItem('actualPosition', JSON.stringify(position));\n    }\n\n    let obj = JSON.parse(position);\n    setActualPosition(obj);\n    return obj;\n  };\n\n  const changePosition = async () => {\n    setWeather({});\n    let position = getActualPosition();\n    const savedPositions = await getCities();\n    const countIndexes = Object.keys(savedPositions).length;\n\n    if (countIndexes > 0) {\n      let obj = {};\n\n      if (position.name == 'Posizione attuale') {\n        obj = savedPositions[0];\n        setGeoData(obj.lat, obj.lon);\n      } else {\n        let cityIndex = savedPositions.findIndex(city => city.name === position.name); //ultimo\n\n        if (cityIndex == countIndexes) {\n          obj = {\n            name: 'Posizione attuale',\n            lat: '',\n            lon: ''\n          };\n          setBrowserPosition();\n        } else {\n          obj = savedPositions[cityIndex];\n          setGeoData(obj.lat, obj.lon);\n        }\n      }\n\n      localStorage.setItem('actualPosition', JSON.stringify(obj));\n    }\n  };\n\n  const fetchDataWeather = async data => {\n    const resWeather = await getWeather(data);\n    setWeather(resWeather);\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate();\n  };\n\n  const fetchDataForecast = async data => {\n    const resForecast = await getForecast(data);\n    setForecast(resForecast);\n  };\n\n  const setGeoData = (lat, lon) => {\n    const geoData = {\n      lat: lat,\n      long: lon\n    };\n    fetchDataWeather(geoData);\n    fetchDataForecast(geoData);\n  };\n\n  const getGeoPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeoData(position.coords.latitude, position.coords.longitude);\n      }, function (err) {\n        setWeather({});\n        setMessage(err.code == 1 ? 'Attiva la posizione del browser' : err.message);\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 30000,\n        timeout: 25000\n      });\n    }\n  };\n\n  const setBrowserPosition = () => {\n    getGeoPosition();\n    setInterval(() => {\n      getGeoPosition();\n    }, 3600000);\n  };\n\n  useEffect(() => {\n    const position = getActualPosition();\n    console.log(position.name); // if(position.name == 'Posizione attuale'){\n    //   setBrowserPosition()\n    // } else {\n    //   setGeoData(position.latitude, position.longitude)\n    // }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [Object.keys(weather).length > 0 ? /*#__PURE__*/_jsxDEV(Weather, {\n      weather: weather,\n      lastWeatherUpdate: lastWeatherUpdate,\n      actualPosition: actualPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Forecasts, {\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HomePage, \"Qq/zLd9Atf/pbA5xvICsDBx3P2c=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/pages/HomePage.js"],"names":["React","useEffect","useState","Forecasts","getWeather","getForecast","Weather","moment","getCities","HomePage","weather","setWeather","forecast","setForecast","message","setMessage","lastWeatherUpdate","setlastWeatherUpdate","actualPosition","setActualPosition","updateLastUpdate","lastUpdate","localStorage","getItem","getActualPosition","position","undefined","name","lat","lon","setItem","JSON","stringify","obj","parse","changePosition","savedPositions","countIndexes","Object","keys","length","setGeoData","cityIndex","findIndex","city","setBrowserPosition","fetchDataWeather","data","resWeather","Date","fetchDataForecast","resForecast","geoData","long","getGeoPosition","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","err","code","enableHighAccuracy","maximumAge","timeout","setInterval","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Forecasts from '../components/Forecasts'\nimport { getWeather, getForecast } from '../api/openweather'\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\n\nconst HomePage = () => {\n  const [weather, setWeather] = useState({})\n  const [forecast, setForecast] = useState({})\n  const [message, setMessage] = useState('Carico..')\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState()\n  const [actualPosition, setActualPosition] = useState()\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  }\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n    if(position == undefined){\n      position = {\n        name: 'Posizione attuale',\n        lat: '',\n        lon:''\n      }\n      localStorage.setItem('actualPosition', JSON.stringify(position));\n    }\n    let obj = JSON.parse(position);\n    setActualPosition(obj);\n    return obj    \n  }\n\n  const changePosition = async () => {\n    setWeather({})\n    let position = getActualPosition()\n    const savedPositions = await getCities()\n    const countIndexes = Object.keys(savedPositions).length\n    if( countIndexes > 0){\n      let obj = {}\n      if(position.name == 'Posizione attuale'){\n        obj = savedPositions[0]\n        setGeoData(obj.lat, obj.lon)\n      } else {\n        let cityIndex = savedPositions.findIndex(city => city.name === position.name)\n        //ultimo\n        if(cityIndex == countIndexes){\n          obj = {\n            name: 'Posizione attuale',\n            lat: '',\n            lon: ''\n          }\n          setBrowserPosition()\n        } else {\n          obj = savedPositions[cityIndex]\n          setGeoData(obj.lat, obj.lon)\n        }\n      }\n\n      localStorage.setItem('actualPosition', JSON.stringify(obj));\n    }\n  }\n\n  const fetchDataWeather = async (data) => {\n    const resWeather = await getWeather(data)\n    setWeather(resWeather)\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate()\n  }\n\n  const fetchDataForecast = async (data) => {\n    const resForecast = await getForecast(data)\n    setForecast(resForecast)\n  }\n\n  const setGeoData = (lat, lon) => {\n    const geoData = {\n      lat: lat,\n      long: lon,\n    }\n    fetchDataWeather(geoData)\n    fetchDataForecast(geoData)\n  } \n\n  const getGeoPosition = () => {\n    if (navigator.geolocation){\n      navigator.geolocation. getCurrentPosition(function(position){\n        setGeoData(position.coords.latitude, position.coords.longitude)\n      }, function(err) {\n        setWeather({})\n        setMessage((err.code == 1) ? 'Attiva la posizione del browser' : err.message)\n      }, {\n        enableHighAccuracy: true,\n        maximumAge        : 30000,\n        timeout           : 25000\n      });\n    }\n  }\n\n  const setBrowserPosition = () => {\n    getGeoPosition()\n    setInterval(() => {\n      getGeoPosition()\n    }, 3600000)\n  }\n\n  useEffect(()=>{\n    const position = getActualPosition()\n    console.log(position.name)\n    // if(position.name == 'Posizione attuale'){\n    //   setBrowserPosition()\n    // } else {\n    //   setGeoData(position.latitude, position.longitude)\n    // }\n  },[])\n\n  return (\n    <div>\n      {(Object.keys(weather).length > 0) ?\n        <Weather \n          weather={weather} \n          lastWeatherUpdate={lastWeatherUpdate} \n          actualPosition={actualPosition}\n         />\n        : <span className='message'>{message}</span>\n      }\n      <Forecasts forecast={forecast} />\n    </div>\n  )\n}\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}