{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getForecast } from '../api/openweather';\n\nconst GetWeather = () => {\n  _s();\n\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n  const [weather, setWeather] = useState({});\n\n  const onChange = ({\n    coords\n  }) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude\n    });\n  };\n\n  const onError = error => {\n    setError(error.message);\n  };\n\n  const fetchDataForecast = async data => {\n    console.log(position); // const resForecast = await getForecast(data)\n    // console.log(resForecast)\n  };\n\n  useEffect(() => {\n    const geo = navigator.geolocation;\n\n    if (!geo) {\n      setError('Geolocation is not supported');\n    }\n\n    geo.clearWatch(geo.watchPosition(onChange, onError));\n    fetchDataForecast();\n  }, []);\n  return { ...weather,\n    error\n  };\n};\n\n_s(GetWeather, \"/2yEOAwt+VkHSlCs52CgzZ69VMk=\");\n\n_c = GetWeather;\nexport default GetWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetWeather\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/components/GetWeather.js"],"names":["useState","useEffect","getForecast","GetWeather","position","setPosition","error","setError","weather","setWeather","onChange","coords","latitude","longitude","onError","message","fetchDataForecast","data","console","log","geo","navigator","geolocation","clearWatch","watchPosition"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAEvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMU,QAAQ,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AAC7BN,IAAAA,WAAW,CAAC;AACVO,MAAAA,QAAQ,EAAED,MAAM,CAACC,QADP;AAEVC,MAAAA,SAAS,EAAEF,MAAM,CAACE;AAFR,KAAD,CAAX;AAID,GALD;;AAOA,QAAMC,OAAO,GAAIR,KAAD,IAAW;AACzBC,IAAAA,QAAQ,CAACD,KAAK,CAACS,OAAP,CAAR;AACD,GAFD;;AAKA,QAAMC,iBAAiB,GAAG,MAAOC,IAAP,IAAgB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ,EADwC,CAExC;AACA;AACD,GAJD;;AAMAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,GAAG,GAAGC,SAAS,CAACC,WAAtB;;AACA,QAAI,CAACF,GAAL,EAAU;AACRb,MAAAA,QAAQ,CAAC,8BAAD,CAAR;AACD;;AACDa,IAAAA,GAAG,CAACG,UAAJ,CAAeH,GAAG,CAACI,aAAJ,CAAkBd,QAAlB,EAA4BI,OAA5B,CAAf;AAEAE,IAAAA,iBAAiB;AAClB,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,EAAC,GAAGR,OAAJ;AAAaF,IAAAA;AAAb,GAAP;AACD,CAnCD;;GAAMH,U;;KAAAA,U;AAqCN,eAAeA,UAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport { getForecast } from '../api/openweather';\n\nconst GetWeather = () => {\n\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n  const [weather, setWeather] = useState({})\n\n  const onChange = ({coords}) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n    });\n  };\n\n  const onError = (error) => {\n    setError(error.message);\n  };\n\n\n  const fetchDataForecast = async (data) => {\n    console.log(position)\n    // const resForecast = await getForecast(data)\n    // console.log(resForecast)\n  }\n\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      setError('Geolocation is not supported');\n    }\n    geo.clearWatch(geo.watchPosition(onChange, onError));\n    \n    fetchDataForecast()\n  }, []);\n\n  return {...weather, error};\n}\n\nexport default GetWeather\n\n\n\n"]},"metadata":{},"sourceType":"module"}