{"ast":null,"code":"var _jsxFileName = \"/home/eric/projects/react/meteoapp/src/components/admin/CityForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { Hint } from 'react-autocomplete-hint';\nimport { getJsonCities } from '../../api/cities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityForm = ({\n  handleSubmit,\n  form,\n  setForm\n}) => {\n  _s();\n\n  const [errors, setErrors] = useState({});\n  const [hintData, setHintData] = useState([]);\n  const [cityController, setCityController] = useState(form.name);\n  const [jsonCities, setJsonCities] = useState(form.name);\n\n  const insertCoord = (coordinate, formName) => {\n    setForm({\n      ['name']: formName,\n      ['lat']: coordinate.lat,\n      ['lon']: coordinate.lon\n    });\n  };\n\n  const getData = async formName => {\n    const resJsonCities = await getJsonCities(formName);\n    var hintArray = [];\n    resJsonCities.map(res => {\n      hintArray.push(res.name);\n      setCityController(res.name);\n      insertCoord(res.coord, formName);\n    });\n    setHintData(hintArray);\n  };\n\n  const validateForm = () => {\n    //validate handle react / react hook / yup / ..\n    for (const [key, value] of Object.entries(form)) {\n      if (!value) {\n        setErrors({\n          [key]: \"required*\"\n        });\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const handleClick = target => {\n    setForm({ ...form,\n      [target.name]: target.value\n    });\n  };\n\n  const handleChange = async target => {\n    setForm({ ...form,\n      [target.name]: target.value\n    });\n\n    if (target.name == 'name') {\n      let value = target.value.charAt(0).toUpperCase() + target.value.slice(1);\n\n      if (value.length > 3) {\n        await getData(value);\n      } else {\n        insertCoord({\n          lat: '',\n          lon: ''\n        }, value);\n        setHintData([]);\n      }\n    }\n  };\n\n  const changeCity = city => {\n    console.log(city);\n  };\n\n  const Cities = () => {\n    return hintData.map((city, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => changeCity(city),\n      children: city\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this));\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    form.name = cityController;\n\n    if (validateForm(form)) {\n      handleSubmit(e, { ...form\n      });\n    }\n  };\n\n  useEffect(() => {\n    setCityController(form.name);\n  }, [form.name]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        md: 4,\n        xs: 12,\n        controlId: \"GridName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Nome Citt\\xE0*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Hint, {\n          options: hintData,\n          allowTabFill: true,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input-with-hint form-control\",\n            value: form.name,\n            name: \"name\",\n            onChange: e => handleChange(e.target),\n            onClick: e => handleClick(e.target)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        md: 4,\n        xs: 12,\n        controlId: \"GridLat\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Latitudine*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"Latitudine\",\n          name: \"lat\",\n          value: form.lat,\n          disabled: true,\n          onChange: e => handleChange(e.target)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.lat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '5px'\n          },\n          children: cityController\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cities-map\",\n          children: /*#__PURE__*/_jsxDEV(Cities, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        md: 4,\n        xs: 12,\n        controlId: \"GridLon\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Longitudine*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"Longitudine\",\n          name: \"lon\",\n          value: form.lon,\n          disabled: true,\n          onChange: e => handleChange(e.target)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"button\",\n      onClick: submitForm,\n      children: \"Salva\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CityForm, \"zkTWwxf9MM7lwZwDw7QEFuOWnlU=\");\n\n_c = CityForm;\nexport default CityForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityForm\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/components/admin/CityForm.js"],"names":["React","useEffect","useState","Form","Button","Col","Hint","getJsonCities","CityForm","handleSubmit","form","setForm","errors","setErrors","hintData","setHintData","cityController","setCityController","name","jsonCities","setJsonCities","insertCoord","coordinate","formName","lat","lon","getData","resJsonCities","hintArray","map","res","push","coord","validateForm","key","value","Object","entries","handleClick","target","handleChange","charAt","toUpperCase","slice","length","changeCity","city","console","log","Cities","index","submitForm","e","preventDefault","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Button, Col} from 'react-bootstrap';\nimport { Hint } from 'react-autocomplete-hint';\nimport { getJsonCities } from '../../api/cities'\n\nconst CityForm = ( { handleSubmit, form, setForm } ) => {\n  const [errors, setErrors] = useState({})\n  const [hintData, setHintData] = useState([])\n  const [cityController, setCityController] = useState(form.name)\n  const [jsonCities, setJsonCities] = useState(form.name)\n\n  const insertCoord = (coordinate, formName) => {\n    setForm({\n      ['name']: formName,\n      ['lat']: coordinate.lat,\n      ['lon']: coordinate.lon,\n    })\n  }\n\n  const getData = async (formName) => {\n    const resJsonCities = await getJsonCities(formName)\n    var hintArray = []\n    resJsonCities.map(res => {\n      hintArray.push(res.name)\n      setCityController(res.name)\n      insertCoord(res.coord, formName)\n    })\n    setHintData(hintArray)\n  }\n\n  const validateForm = () => {\n    //validate handle react / react hook / yup / ..\n    for (const [key, value] of Object.entries(form)) {\n      if(!value){\n        setErrors({ [key]: \"required*\"})\n        return false\n      } \n    }\n    return true\n  }\n\n  const handleClick = (target) => {\n    setForm({\n      ...form,\n      [target.name]: target.value\n    })\n  }\n\n  const handleChange = async (target) => {\n    setForm({\n      ...form,\n      [target.name]: target.value\n    })\n\n    if(target.name == 'name'){\n      let value = target.value.charAt(0).toUpperCase() + target.value.slice(1);\n      if(value.length > 3){\n        await getData(value)\n      } else {\n        insertCoord({\n          lat:'',\n          lon: ''\n        }, value)\n        setHintData([])\n      }\n    }\n  }\n\n  const changeCity = (city) => {\n    console.log(city)\n  }\n\n  const Cities = () => {\n    return(\n      hintData.map( (city, index) => (\n        <span key={index} onClick={()=> changeCity(city) }>\n          {city}\n        </span>\n        )\n      )\n    )\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    form.name = cityController\n    if(validateForm(form)){\n      handleSubmit(e, {...form})\n    }\n  }\n\n  useEffect(() => { \n    setCityController(form.name)\n  }, [form.name])\n\n  return(\n    <Form style={{marginTop: '50px'}}>\n      <Form.Row>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridName\">\n          <Form.Label>Nome Città*</Form.Label>\n          <Hint options={hintData} allowTabFill>\n            <input className='input-with-hint form-control'\n              value={form.name}\n              name=\"name\"\n              onChange={e => handleChange(e.target)}   \n              onClick={e => handleClick(e.target)}   \n              />\n          </Hint>\n          \n          <p>{errors.name}</p>\n        </Form.Group>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridLat\">\n          <Form.Label>Latitudine*</Form.Label>\n          <Form.Control placeholder=\"Latitudine\" name=\"lat\" value={form.lat} \n          disabled\n          onChange={e => handleChange(e.target)}\n           />\n          <p>{errors.lat}</p>\n          <p style={{marginTop: '5px'}}>{cityController}</p>\n          <hr />\n          <div className='cities-map'>\n            <Cities />\n          </div>\n        </Form.Group>\n        <Form.Group as={Col} md={4} xs={12} controlId=\"GridLon\">\n          <Form.Label>Longitudine*</Form.Label>\n          <Form.Control placeholder=\"Longitudine\" name=\"lon\" value={form.lon} \n          disabled\n          onChange={e => handleChange(e.target)}\n           />\n          <p>{errors.lon}</p>\n        </Form.Group>\n      </Form.Row>\n      <Button variant=\"primary\" type=\"button\" onClick={submitForm}>\n        Salva\n      </Button>\n    </Form>  \n    )\n}\n\nexport default CityForm\n"]},"metadata":{},"sourceType":"module"}