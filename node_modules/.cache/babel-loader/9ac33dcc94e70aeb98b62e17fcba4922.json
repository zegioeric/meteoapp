{"ast":null,"code":"var _jsxFileName = \"/home/eric/projects/react/meteoapp/src/pages/HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Forecasts from '../components/Forecasts';\nimport { getWeather, getForecast } from '../api/openweather';\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HomePage = () => {\n  _s();\n\n  const [weather, setWeather] = useState([]);\n  const [forecast, setForecast] = useState({});\n  const [message, setMessage] = useState('Carico..');\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState('');\n  const [actualPosition, setActualPosition] = useState({});\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  };\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n\n    if (!position) {\n      position = JSON.stringify({\n        name: 'Posizione attuale',\n        lat: '',\n        lon: ''\n      });\n      localStorage.setItem('actualPosition', position);\n    }\n\n    let obj = JSON.parse(position);\n    setActualPosition(obj);\n    return 'Posizione attuale';\n  }; // const changePosition = async () => {\n  //   let position = getActualPosition()\n  //   const savedPositions = await getCities()\n  //   const countIndexes = Object.keys(savedPositions).length\n  //   if( countIndexes > 0){\n  //     let obj = {}\n  //     if(position.name == 'Posizione attuale'){\n  //       obj = savedPositions[0]\n  //       setGeoData(obj.lat, obj.lon)\n  //     } else {\n  //       let cityIndex = savedPositions.findIndex(city => city.name === position.name)\n  //       //ultimo\n  //       if(cityIndex == countIndexes){\n  //         obj = {\n  //           name: 'Posizione attuale',\n  //           lat: '',\n  //           lon: ''\n  //         }\n  //         setBrowserPosition()\n  //       } else {\n  //         obj = savedPositions[cityIndex]\n  //         setGeoData(obj.lat, obj.lon)\n  //       }\n  //     }\n  //     localStorage.setItem('actualPosition', JSON.stringify(obj));\n  //   }\n  // }\n\n\n  const fetchDataWeather = async data => {\n    const resWeather = await getWeather(data);\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate();\n    setWeather([resWeather]);\n  };\n\n  const fetchDataForecast = async data => {\n    const resForecast = await getForecast(data);\n    setForecast(resForecast);\n  };\n\n  const setGeoData = (lat, lon) => {\n    const geoData = {\n      lat: lat,\n      long: lon\n    };\n    fetchDataWeather(geoData);\n    fetchDataForecast(geoData);\n  };\n\n  const getGeoPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeoData(position.coords.latitude, position.coords.longitude);\n      }, function (err) {\n        setWeather({});\n        setMessage(err.code == 1 ? 'Attiva la posizione del browser' : err.message);\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 30000,\n        timeout: 25000\n      });\n    }\n  };\n\n  const setBrowserPosition = () => {\n    getGeoPosition();\n    setInterval(() => {\n      getGeoPosition();\n    }, 3600000);\n  };\n\n  useEffect(() => {\n    let res = getActualPosition();\n\n    if (res.name == 'Posizione attuale') {\n      setBrowserPosition();\n    } else {\n      setGeoData(res.lat, res.lon);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [weather[0] ? /*#__PURE__*/_jsxDEV(Weather, {\n      weather: weather[0],\n      lastWeatherUpdate: lastWeatherUpdate,\n      actualPosition: actualPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Forecasts, {\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HomePage, \"e8ji+kd7+uT7NYjEZ/xOgt6JJWw=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/pages/HomePage.js"],"names":["React","useEffect","useState","Forecasts","getWeather","getForecast","Weather","moment","getCities","HomePage","weather","setWeather","forecast","setForecast","message","setMessage","lastWeatherUpdate","setlastWeatherUpdate","actualPosition","setActualPosition","updateLastUpdate","lastUpdate","localStorage","getItem","getActualPosition","position","JSON","stringify","name","lat","lon","setItem","obj","parse","fetchDataWeather","data","resWeather","Date","fetchDataForecast","resForecast","setGeoData","geoData","long","getGeoPosition","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","err","code","enableHighAccuracy","maximumAge","timeout","setBrowserPosition","setInterval","res"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Forecasts from '../components/Forecasts'\nimport { getWeather, getForecast } from '../api/openweather'\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\n\nconst HomePage = () => {\n  const [weather, setWeather] = useState([])\n  const [forecast, setForecast] = useState({})\n  const [message, setMessage] = useState('Carico..')\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState('')\n  const [actualPosition, setActualPosition] = useState({})\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  }\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n    if(!position){\n      position = JSON.stringify({\n        name: 'Posizione attuale',\n        lat: '',\n        lon:''\n      });\n\n      localStorage.setItem('actualPosition', position);\n    }\n    let obj = JSON.parse(position);\n    setActualPosition(obj);\n    \n    return 'Posizione attuale'    \n  }\n\n  // const changePosition = async () => {\n  //   let position = getActualPosition()\n  //   const savedPositions = await getCities()\n  //   const countIndexes = Object.keys(savedPositions).length\n  //   if( countIndexes > 0){\n  //     let obj = {}\n  //     if(position.name == 'Posizione attuale'){\n  //       obj = savedPositions[0]\n  //       setGeoData(obj.lat, obj.lon)\n  //     } else {\n  //       let cityIndex = savedPositions.findIndex(city => city.name === position.name)\n  //       //ultimo\n  //       if(cityIndex == countIndexes){\n  //         obj = {\n  //           name: 'Posizione attuale',\n  //           lat: '',\n  //           lon: ''\n  //         }\n  //         setBrowserPosition()\n  //       } else {\n  //         obj = savedPositions[cityIndex]\n  //         setGeoData(obj.lat, obj.lon)\n  //       }\n  //     }\n  //     localStorage.setItem('actualPosition', JSON.stringify(obj));\n  //   }\n  // }\n\n  const fetchDataWeather = async (data) => {\n    const resWeather = await getWeather(data)\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate()\n    setWeather([resWeather])\n  }\n\n  const fetchDataForecast = async (data) => {\n    const resForecast = await getForecast(data)\n    setForecast(resForecast)\n  }\n\n  const setGeoData = (lat, lon) => {\n    const geoData = {\n      lat: lat,\n      long: lon,\n    }\n    fetchDataWeather(geoData)\n    fetchDataForecast(geoData)\n  } \n\n  const getGeoPosition = () => {\n    if (navigator.geolocation){\n      navigator.geolocation. getCurrentPosition(function(position){\n        setGeoData(position.coords.latitude, position.coords.longitude)\n      }, function(err) {\n        setWeather({})\n        setMessage((err.code == 1) ? 'Attiva la posizione del browser' : err.message)\n      }, {\n        enableHighAccuracy: true,\n        maximumAge        : 30000,\n        timeout           : 25000\n      });\n    }\n  }\n\n  const setBrowserPosition = () => {\n    getGeoPosition()\n    setInterval(() => {\n      getGeoPosition()\n    }, 3600000)\n  }\n\n  useEffect(()=>{\n    let res = getActualPosition()\n    if(res.name == 'Posizione attuale'){\n      setBrowserPosition()\n    } else {\n      setGeoData(res.lat, res.lon)\n    }\n  },[])\n\n  return (\n    <div>\n      {(weather[0]) ?\n        <Weather weather={weather[0]} lastWeatherUpdate={lastWeatherUpdate} actualPosition={actualPosition} />\n        : <span className='message'>{message}</span>\n      }\n      <Forecasts forecast={forecast} />\n    </div>\n  )\n}\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}