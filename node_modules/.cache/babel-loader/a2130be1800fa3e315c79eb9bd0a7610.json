{"ast":null,"code":"var _jsxFileName = \"/home/eric/projects/react/meteoapp/src/components/Forecasts.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport { useState } from 'react';\nimport WeatherIcon from 'react-icons-weather';\nimport Moment from 'react-moment';\nimport '../css/Forecasts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecasts = ({\n  forecast\n}) => {\n  _s();\n\n  const [openClass, setOpenClass] = useState();\n\n  const transformDate = string => {\n    console.log(string);\n  };\n\n  const ForecastBoxes = () => {\n    return forecast.list.map(forecastObj => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(WeatherIcon, {\n          name: \"owm\",\n          iconId: forecastObj.weather[0].id.toString(),\n          flip: \"horizontal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(Moment, {\n          date: transformDate(forecastObj.weather[0]),\n          format: \"DD/MM, HH:MM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" alle \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: forecastObj.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'container-forecasts ' + openClass,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contain\",\n      children: Object.keys(forecast).length > 0 ? /*#__PURE__*/_jsxDEV(ForecastBoxes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"side\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hamburger\",\n        onClick: () => setOpenClass(openClass ? '' : 'open'),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hamburger-box\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hamburger-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecasts, \"TbGBcmc41vlcTLMqrZ8+AdHNpfM=\");\n\n_c = Forecasts;\nexport default Forecasts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecasts\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/components/Forecasts.js"],"names":["moment","useState","WeatherIcon","Moment","Forecasts","forecast","openClass","setOpenClass","transformDate","string","console","log","ForecastBoxes","list","map","forecastObj","weather","id","toString","description","Object","keys","length"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAChC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,EAA1C;;AAEA,QAAMO,aAAa,GAAIC,MAAD,IAAY;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFD;;AAIA,QAAMG,aAAa,GAAG,MAAM;AAC1B,WACEP,QAAQ,CAACQ,IAAT,CAAcC,GAAd,CAAmBC,WAAW,iBAC5B;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA,+BAAM,QAAC,WAAD;AAAa,UAAA,IAAI,EAAC,KAAlB;AAAwB,UAAA,MAAM,EAAEA,WAAW,CAACC,OAAZ,CAAoB,CAApB,EAAuBC,EAAvB,CAA0BC,QAA1B,EAAhC;AAAsE,UAAA,IAAI,EAAC;AAA3E;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BAAM,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAEV,aAAa,CAACO,WAAW,CAACC,OAAZ,CAAoB,CAApB,CAAD,CAA3B;AAAqD,UAAA,MAAM,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAME;AAAA,kBAAID,WAAW,CAACC,OAAZ,CAAoB,CAApB,EAAuBG;AAA3B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAYD,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAE,yBAAuBb,SAAvC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACIc,MAAM,CAACC,IAAP,CAAYhB,QAAZ,EAAsBiB,MAAtB,GAA+B,CAAhC,gBACC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADD,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAMf,YAAY,CAAED,SAAD,GAAc,EAAd,GAAmB,MAApB,CAAtD;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAvCD;;GAAMF,S;;KAAAA,S;AAyCN,eAAeA,SAAf","sourcesContent":["import moment from 'moment';\nimport { useState } from 'react';\nimport WeatherIcon from 'react-icons-weather';\nimport Moment from 'react-moment';\nimport '../css/Forecasts.css'\n\nconst Forecasts = ({forecast}) => {\n  const [openClass, setOpenClass] = useState()\n\n  const transformDate = (string) => {\n    console.log(string)\n  }\n\n  const ForecastBoxes = () => {\n    return(\n      forecast.list.map( forecastObj => (\n        <div className='box'>\n          <span><WeatherIcon name=\"owm\" iconId={forecastObj.weather[0].id.toString()} flip=\"horizontal\" /></span>\n          <span><Moment date={transformDate(forecastObj.weather[0])} format=\"DD/MM, HH:MM\" /></span>\n          <span> alle </span>\n          <span></span>\n          {/* <span><Moment date={forecastObj.weather[0].dt_txt} format=\"\" /></span> */}\n          <p>{forecastObj.weather[0].description}</p>\n        </div>\n      ))\n    )\n  }\n\n  return (\n    <div className={'container-forecasts '+openClass}>\n      <div className='contain'>\n        {(Object.keys(forecast).length > 0) ?\n          <ForecastBoxes />\n          : ''\n        }\n      </div>\n      <div className='side'>\n        <div className=\"hamburger\" onClick={() => setOpenClass((openClass) ? '' : 'open')}>\n          <div className=\"hamburger-box\">\n            <div className=\"hamburger-inner\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Forecasts;\n"]},"metadata":{},"sourceType":"module"}