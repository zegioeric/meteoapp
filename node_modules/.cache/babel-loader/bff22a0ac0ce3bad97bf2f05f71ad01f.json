{"ast":null,"code":"var _jsxFileName = \"/home/eric/projects/react/meteoapp/src/pages/HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Forecasts from '../components/Forecasts';\nimport { getWeather, getForecast } from '../api/openweather';\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HomePage = () => {\n  _s();\n\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [message, setMessage] = useState('Carico..');\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState();\n  const [actualPosition, setActualPosition] = useState();\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  };\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n\n    if (position == undefined) {\n      position = {\n        name: 'Posizione attuale',\n        lat: '',\n        lon: ''\n      };\n      localStorage.setItem('actualPosition', position);\n    }\n\n    setActualPosition(position);\n    return position;\n  };\n\n  const changePosition = async () => {\n    let position = getActualPosition();\n    const savedPositions = await getCities();\n\n    if (position == 'Posizione attuale') {\n      localStorage.setItem('actualPosition', savedPositions[0]);\n    }\n  };\n\n  const fetchDataWeather = async data => {\n    const resWeather = await getWeather(data);\n    setWeather(resWeather);\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate();\n  };\n\n  const fetchDataForecast = async data => {\n    const resForecast = await getForecast(data);\n    setForecast(resForecast);\n  };\n\n  const getGeoPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        const geoData = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        };\n        fetchDataWeather(geoData);\n        fetchDataForecast(geoData);\n      }, function (err) {\n        setWeather({});\n        setMessage(err.code == 1 ? 'Attiva la posizione del browser' : err.message);\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 30000,\n        timeout: 25000\n      });\n    }\n  };\n\n  useEffect(() => {\n    const position = getActualPosition();\n\n    if (position.name == 'Posizione attuale') {\n      getGeoPosition();\n      setInterval(() => {\n        getGeoPosition();\n      }, 3600000);\n    } else {\n      const geoData = {\n        lat: position.latitude,\n        long: position.longitude\n      };\n      fetchDataWeather(geoData);\n      fetchDataForecast(geoData);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [Object.keys(weather).length > 0 ? /*#__PURE__*/_jsxDEV(Weather, {\n      weather: weather,\n      lastWeatherUpdate: lastWeatherUpdate,\n      actualPosition: actualPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Forecasts, {\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HomePage, \"Qq/zLd9Atf/pbA5xvICsDBx3P2c=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/home/eric/projects/react/meteoapp/src/pages/HomePage.js"],"names":["React","useEffect","useState","Forecasts","getWeather","getForecast","Weather","moment","getCities","HomePage","weather","setWeather","forecast","setForecast","message","setMessage","lastWeatherUpdate","setlastWeatherUpdate","actualPosition","setActualPosition","updateLastUpdate","lastUpdate","localStorage","getItem","getActualPosition","position","undefined","name","lat","lon","setItem","changePosition","savedPositions","fetchDataWeather","data","resWeather","Date","fetchDataForecast","resForecast","getGeoPosition","navigator","geolocation","getCurrentPosition","geoData","coords","latitude","long","longitude","err","code","enableHighAccuracy","maximumAge","timeout","setInterval","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Forecasts from '../components/Forecasts'\nimport { getWeather, getForecast } from '../api/openweather'\nimport Weather from '../components/Weather';\nimport moment from 'moment';\nimport { getCities } from '../api/cities';\n\nconst HomePage = () => {\n  const [weather, setWeather] = useState({})\n  const [forecast, setForecast] = useState({})\n  const [message, setMessage] = useState('Carico..')\n  const [lastWeatherUpdate, setlastWeatherUpdate] = useState()\n  const [actualPosition, setActualPosition] = useState()\n\n  const updateLastUpdate = () => {\n    const lastUpdate = localStorage.getItem('lastWeatherUpdate');\n    setlastWeatherUpdate(lastUpdate);\n  }\n\n  const getActualPosition = () => {\n    let position = localStorage.getItem('actualPosition');\n    if(position == undefined){\n      position = {\n        name: 'Posizione attuale',\n        lat: '',\n        lon:''\n      }\n      localStorage.setItem('actualPosition', position);\n    }\n    setActualPosition(position);\n    return position    \n  }\n\n  const changePosition = async () => {\n    let position = getActualPosition()\n    const savedPositions = await getCities()\n    if(position == 'Posizione attuale'){\n      localStorage.setItem('actualPosition', savedPositions[0]);\n    }\n\n  }\n\n  const fetchDataWeather = async (data) => {\n    const resWeather = await getWeather(data)\n    setWeather(resWeather)\n    localStorage.setItem('lastWeatherUpdate', moment(new Date()));\n    updateLastUpdate()\n  }\n\n  const fetchDataForecast = async (data) => {\n    const resForecast = await getForecast(data)\n    setForecast(resForecast)\n  }\n\n  const getGeoPosition = () => {\n    if (navigator.geolocation){\n      navigator.geolocation. getCurrentPosition(function(position){\n        const geoData = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude,\n        }\n\n        fetchDataWeather(geoData)\n        fetchDataForecast(geoData)\n      \n      }, function(err) {\n        setWeather({})\n        setMessage((err.code == 1) ? 'Attiva la posizione del browser' : err.message)\n      }, {\n        enableHighAccuracy: true,\n        maximumAge        : 30000,\n        timeout           : 25000\n      });\n    }\n  }\n\n  useEffect(()=>{\n    const position = getActualPosition()\n    if(position.name == 'Posizione attuale'){\n      getGeoPosition()\n      setInterval(() => {\n        getGeoPosition()\n      }, 3600000)\n    } else {\n      const geoData = {\n        lat: position.latitude,\n        long: position.longitude,\n      }\n      fetchDataWeather(geoData)\n      fetchDataForecast(geoData)\n    }\n\n  },[])\n\n  return (\n    <div>\n      {(Object.keys(weather).length > 0) ?\n        <Weather weather={weather} lastWeatherUpdate={lastWeatherUpdate} actualPosition={actualPosition} />\n        : <span className='message'>{message}</span>\n      }\n      <Forecasts forecast={forecast} />\n    </div>\n  )\n}\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}